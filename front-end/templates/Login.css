<!DOCTYPE html>
<html lang="en">
  <head>
  	<meta charset="utf-8">
    <meta name="viewport"
          content="width=device-width, initial-scale=1, shrink-to-fit=no">
          <title>Welcome user</title>
              <link rel="stylesheet" type="text/css" href="{{ url_for('static',filename='Login.css') }}">

    <style>
      #map {
        height: 50%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 10px;
        padding: 0;
      }
      #search{
        text-align: center;
      }
      #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
      }

      #infowindow-content .title {
        font-weight: bold;
      }

      #infowindow-content {
        display: none;
      }

      #map #infowindow-content {
        display: inline;
      }

      .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
      }

      #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
      }

      .pac-controls {
        display: inline-block;
        padding: 5px 11px;
      }

      .pac-controls label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }
      #addloc{
        text-align: center;
        margin: 20px 500px;
       }
      #submitloc{
        text-align: center;
        margin: 20px 560px;
      }
      #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
      }
      #target {
        width: 345px;
      }
    </style>
  </head>
  <body>
  	<p> Hello! Welcome Service provider</p>
    <!-- <form> -->
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <div id="addloc">
    <button type="button", onclick="addLocationToArray()">Add</button>
    </div>
    <div id="search">
    <label id="locationError">Search and add locations you can serve.</label>
    </div>
    <div id="submitloc">
    <button type="button", onclick="addSPUser()">Submit</button>
    </div>
    <!-- </form> -->
    <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
      var locations = [];
      var place_id = null;
      var url = null;
      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();
          console.log(places);
          console.log(places[0].place_id); 
          console.log(places[0].url); 

          place_id = places[0].place_id;
          url = places[0].url;
          //sessionStorage.setItem("place_id", places[0].place_id);
          //sessionStorage.setItem("url", places[0].url);


          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }

      function addLocationToArray(){

          //add place_id and url to firebase
          if(place_id != null && url != null){
            var location = {}
            location ["place_id"] = place_id;
            location ["url"] = url;

            locations.push(location);
            place_id = null;
            url = null;
            console.log(locations);
            document.getElementById("locationError").innerText = "Location added to list";
          }
          else{
            document.getElementById("locationError").innerText = "Search a place and then click add";
          }
      }

      function addSPUser(){
        var request = new XMLHttpRequest()

         // Open a new connection, using the GET request on the URL endpoint
        request.open('POST', 'http://127.0.0.1:5000/userServiceProvider', true)
        request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        var obj = new Object();
        obj.name = sessionStorage.getItem('username');
        obj.emailId = sessionStorage.getItem('emailId');
        obj.location = locations;

        request.onload = function () {
          // Begin accessing JSON data here
          var data = JSON.parse(this.response)

        if (request.status >= 200 && request.status < 400) {
            console.log(data)
            window.location = "ServicesList.html";

        } else {
          console.log('error in creating user')
        }
          }

        // Send request
        request.send(JSON.stringify(obj));
      }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAMeR2UH-oSg5u4-CDz_OnUymFXQghe5wE&libraries=places&callback=initAutocomplete"
         async defer>
    </script>

  </body>
  </html>
